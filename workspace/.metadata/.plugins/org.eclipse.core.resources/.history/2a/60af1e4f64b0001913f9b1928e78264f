import java.io.IOException;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.lib.db.DBConfiguration;
import org.apache.hadoop.mapreduce.lib.db.DBInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;
import org.apache.hadoop.mapreduce.lib.reduce.LongSumReducer;
import org.apache.hadoop.util.Tool;
import org.apache.hadoop.util.ToolRunner;


public class SaleAnalysis  extends Configured implements Tool{
	
	public static class MapClass extends Mapper<LongWritable, SalesRecord,Text, LongWritable> {
		
		public void map (LongWritable key, SalesRecord value, Context context) throws IOException, InterruptedException {
			context.write(new Text(value.getRegion()), new LongWritable(value.getQuantity()));
		}
	}
	
	public static void deletePreviousOutput(Configuration conf, Path path) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			hdfs.delete(path, true);
		} catch (IOException e) {
			// Ignore exceptions which will occur
			// if the output directory doesn't exist
		}
	}
	
	public static void main(String[] args) throws Exception {
		int result = ToolRunner.run(new Configuration(), new SaleAnalysis(), args);
		System.exit(result);
	}

	@Override
	public int run(String[] args) throws Exception {
		Path out = new Path(args[0]);
        
        Configuration conf = this.getConf();
        deletePreviousOutput(conf, out);
        
		Job job = Job.getInstance(conf);		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(LongWritable.class);
		
		job.setMapperClass(MapClass.class);
		job.setReducerClass(LongSumReducer.class);
		
		DBConfiguration.configureDB(conf, "com.mysql.jdbc.Driver", "jdbc:mysql://localhost/sales?user=root&password=xrBouqf2");
		
		String[] fieldNames = {"id", "region", "date", "quantity", "price"};
		DBInputFormat.setInput(job, SalesRecord.class, "sales", null, null, fieldNames);
		
		job.setOutputFormatClass(TextOutputFormat.class);
		
		FileOutputFormat.setOutputPath(job, out);
		
		job.setJarByClass(SaleAnalysis.class);
		
		return job.waitForCompletion(true)? 0 : 1;
	}

}
