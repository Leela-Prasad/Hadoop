package supportingJobs;

import java.io.IOException;
import java.util.Iterator;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.LongWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.Reducer.Context;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.TextOutputFormat;

import joinObjects.LoanIDAndTagKey;

public class Job1_JoinAllData {

	public static class MapClass extends Mapper<Text, Text,LoanIDAndTagKey, Text> {
		
		public void map (Text key, Text value, Context context) throws IOException, InterruptedException {
			FileSplit fileSplit = (FileSplit)context.getInputSplit();
			String fileName = fileSplit.getPath().getName();
			
			Integer tag = Integer.valueOf(context.getConfiguration().get(fileName));
		}
	}
	
	public static class Reduce extends Reducer<Text, LongWritable,Text,LongWritable> {

		public void reduce(Text key, Iterable<LongWritable> values, Context context) throws IOException, InterruptedException {
			Long sum = 0L;
			Iterator<LongWritable> it = values.iterator();
			while (it.hasNext()) {
				sum += it.next().get();
			}
			
			context.write(key, new LongWritable(sum));
		}
	}
	
	public static void deletePreviousOutput(Configuration conf, Path path) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			hdfs.delete(path, true);
		} catch (IOException e) {
			// Ignore exceptions which will occur
			// if the output directory doesn't exist
		}
	}
	
	public static void main(String[] args) throws Exception {
		Path in1 = new Path(args[0]); // ratings file
		Path in2 = new Path(args[1]); // loan data file
		Path in3 = new Path(args[2]); // payments file
		Path out = new Path(args[3]);
        
        Configuration conf = new Configuration();
        conf.set("mapreduce.input.keyvaluelinerecordreader.key.value.separator", ",");
        
        deletePreviousOutput(conf, out);
        
        conf.set(in1.getName(), "1");
        conf.set(in2.getName(), "2");
        conf.set(in3.getName(), "3");
        
		generateAndConfigureJob(out, conf);
		
	}

	private static void generateAndConfigureJob(Path out, Configuration conf) throws IOException, InterruptedException, ClassNotFoundException {
		
		/*Job job = Job.getInstance(conf);		
		
		
		
		job.setOutputKeyClass(Text.class);
		job.setOutputValueClass(LongWritable.class);
		
		job.setMapperClass(MapClass.class);
		job.setReducerClass(Reduce.class);
		
		job.setInputFormatClass(KeyValueTextInputFormat.class); 
		job.setOutputFormatClass(TextOutputFormat.class);
		
		FileInputFormat.setInputPaths(job, in);
		FileOutputFormat.setOutputPath(job, out);
		
		// job.setJarByClass(.class);
		job.submit();*/
	}
	
	
}
