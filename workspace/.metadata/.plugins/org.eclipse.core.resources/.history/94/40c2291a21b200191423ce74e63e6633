package supportingJobs;

import java.io.IOException;
import java.math.BigDecimal;
import java.util.GregorianCalendar;
import java.util.Iterator;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.chain.ChainMapper;
import org.apache.hadoop.mapreduce.lib.chain.ChainReducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.input.FileSplit;
import org.apache.hadoop.mapreduce.lib.input.KeyValueTextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
import org.apache.hadoop.mapreduce.lib.output.SequenceFileOutputFormat;

import dataTypes.LoanRecord;
import dataTypes.MetricsOutput;
import dataTypes.MetricsRecord;
import joinObjects.LoanIDAndTagKey;
import joinObjects.LoanIdComparator;
import joinObjects.LoanIdPartitioner;

public class Job2_CreateMetrics {

	public static class MapClass extends Mapper<IntWritable, LoanRecord,IntWritable, MetricsOutput> {
		
		public void map (IntWritable key, LoanRecord value, Context context) throws IOException, InterruptedException {
			MetricsOutput metrics = new MetricsOutput();
			metrics.addLoan(value.finalStatus());
			context.write(new IntWritable(value.getRating()), metrics);
		}
	}
	
	public static class Reduce extends Reducer<IntWritable, MetricsOutput, MetricsRecord, Text> {

		public void reduce(LoanIDAndTagKey key, Iterable<Text> values, Context context) throws IOException, InterruptedException {
			Iterator<Text> it = values.iterator();
			
			
			context.write(new IntWritable(loanRecord.getLoanId()), loanRecord);
		}
	}
	
	public static void deletePreviousOutput(Configuration conf, Path path) {
		try {
			FileSystem hdfs = FileSystem.get(conf);
			hdfs.delete(path, true);
		} catch (IOException e) {}
	}
	
	public static void main(String[] args) throws Exception {
		Path in1 = new Path(args[0]); // ratings file
		Path in2 = new Path(args[1]); // loan data file
		Path in3 = new Path(args[2]); // payments file
		Path out = new Path(args[3]);
        
        Configuration conf = new Configuration();
        conf.set("mapreduce.input.keyvaluelinerecordreader.key.value.separator", ",");
        
        deletePreviousOutput(conf, out);
        
        conf.set(in1.getName(), "1");
        conf.set(in2.getName(), "2");
        conf.set(in3.getName(), "3");
        
		Job job = generateAndConfigureJob(in1, in2, in3, out, conf);
		job.submit();
	}

	private static Job generateAndConfigureJob(Path in1, Path in2, Path in3, Path out, Configuration conf) throws IOException, InterruptedException, ClassNotFoundException {
		
		Job job = Job.getInstance(conf);		
		
		job.setMapOutputKeyClass(LoanIDAndTagKey.class);
		job.setMapOutputValueClass(Text.class);
		
		job.setOutputKeyClass(IntWritable.class);
		job.setOutputValueClass(LoanRecord.class);
		
		ChainMapper.addMapper(job, MapClass.class, Text.class, Text.class, LoanIDAndTagKey.class, Text.class, conf);
		ChainMapper.addMapper(job, PreProcessRating.class, LoanIDAndTagKey.class, Text.class, LoanIDAndTagKey.class, Text.class, conf);
		ChainReducer.setReducer(job, Reduce.class, LoanIDAndTagKey.class, Text.class, IntWritable.class, LoanRecord.class, conf);
				
		job.setPartitionerClass(LoanIdPartitioner.class);
		job.setGroupingComparatorClass(LoanIdComparator.class);
		
		job.setInputFormatClass(KeyValueTextInputFormat.class); 
		job.setOutputFormatClass(SequenceFileOutputFormat.class);
		
		FileInputFormat.addInputPath(job, in1);
		FileInputFormat.addInputPath(job, in2);
		FileInputFormat.addInputPath(job, in3);
		FileOutputFormat.setOutputPath(job, out);
		
		job.setJarByClass(Job1_JoinAllData.class);
		return job;
	}
	
	
}
